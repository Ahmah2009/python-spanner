# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import division
from __future__ import absolute_import
from __future__ import print_function

import os
from pathlib import Path
import sys

import nox


# WARNING - WARNING - WARNING - WARNING - WARNING
# WARNING - WARNING - WARNING - WARNING - WARNING
#           DO NOT EDIT THIS FILE EVER!
# WARNING - WARNING - WARNING - WARNING - WARNING
# WARNING - WARNING - WARNING - WARNING - WARNING

# Copy `noxfile_config.py` to your directory and modify it instead.


# `TEST_CONFIG` dict is a configuration hook that allows users to
# modify the test configurations. The values here should be in sync
# with `noxfile_config.py`. Users will copy `noxfile_config.py` into
# their directory and modify it.

TEST_CONFIG = {
    # You can opt out from the test for specific Python versions.
    u'ignored_versions': [u"2.7"],

    # An envvar key for determining the project id to use. Change it
    # to 'BUILD_SPECIFIC_GCLOUD_PROJECT' if you want to opt in using a
    # build specific Cloud project. You can also use your own string
    # to use your own Cloud project.
    u'gcloud_project_env': u'GOOGLE_CLOUD_PROJECT',
    # 'gcloud_project_env': 'BUILD_SPECIFIC_GCLOUD_PROJECT',

    # A dictionary you want to inject into your test. Don't put any
    # secrets here. These values will override predefined values.
    u'envs': {},
}


try:
    # Ensure we can import noxfile_config in the project's directory.
    sys.path.append(u'.')
    from noxfile_config import TEST_CONFIG_OVERRIDE
except ImportError, e:
    print u"No user noxfile_config found: detail: {}".format(e)
    TEST_CONFIG_OVERRIDE = {}

# Update the TEST_CONFIG with the user supplied values.
TEST_CONFIG.update(TEST_CONFIG_OVERRIDE)


def get_pytest_env_vars():
    u"""Returns a dict for pytest invocation."""
    ret = {}

    # Override the GCLOUD_PROJECT and the alias.
    env_key = TEST_CONFIG[u'gcloud_project_env']
    # This should error out if not set.
    ret[u'GOOGLE_CLOUD_PROJECT'] = os.environ[env_key]

    # Apply user supplied envs.
    ret.update(TEST_CONFIG[u'envs'])
    return ret


# DO NOT EDIT - automatically generated.
# All versions used to tested samples.
ALL_VERSIONS = [u"2.7", u"3.6", u"3.7", u"3.8"]

# Any default versions that should be ignored.
IGNORED_VERSIONS = TEST_CONFIG[u'ignored_versions']

TESTED_VERSIONS = sorted([v for v in ALL_VERSIONS if v not in IGNORED_VERSIONS])

INSTALL_LIBRARY_FROM_SOURCE = bool(os.environ.get(u"INSTALL_LIBRARY_FROM_SOURCE", False))
#
# Style Checks
#


def _determine_local_import_names(start_dir):
    u"""Determines all import names that should be considered "local".

    This is used when running the linter to insure that import order is
    properly checked.
    """
    file_ext_pairs = [os.path.splitext(path) for path in os.listdir(start_dir)]
    return [
        basename
        for basename, extension in file_ext_pairs
        if extension == u".py"
        or os.path.isdir(os.path.join(start_dir, basename))
        and basename not in (u"__pycache__")
    ]


# Linting with flake8.
#
# We ignore the following rules:
#   E203: whitespace before ‘:’
#   E266: too many leading ‘#’ for block comment
#   E501: line too long
#   I202: Additional newline in a section of imports
#
# We also need to specify the rules which are ignored by default:
# ['E226', 'W504', 'E126', 'E123', 'W503', 'E24', 'E704', 'E121']
FLAKE8_COMMON_ARGS = [
    u"--show-source",
    u"--builtin=gettext",
    u"--max-complexity=20",
    u"--import-order-style=google",
    u"--exclude=.nox,.cache,env,lib,generated_pb2,*_pb2.py,*_pb2_grpc.py",
    u"--ignore=E121,E123,E126,E203,E226,E24,E266,E501,E704,W503,W504,I202",
    u"--max-line-length=88",
]


@nox.session
def lint(session):
    session.install(u"flake8", u"flake8-import-order")

    local_names = _determine_local_import_names(u".")
    args = FLAKE8_COMMON_ARGS + [
        u"--application-import-names",
        u",".join(local_names),
        u"."
    ]
    session.run(u"flake8", *args)


#
# Sample Tests
#


PYTEST_COMMON_ARGS = [u"--junitxml=sponge_log.xml"]


def _session_tests(session, post_install=None):
    u"""Runs py.test for a particular project."""
    if os.path.exists(u"requirements.txt"):
        session.install(u"-r", u"requirements.txt")

    if os.path.exists(u"requirements-test.txt"):
        session.install(u"-r", u"requirements-test.txt")

    if INSTALL_LIBRARY_FROM_SOURCE:
        session.install(u"-e", _get_repo_root())

    if post_install:
        post_install(session)

    session.run(
        u"pytest",
        *(PYTEST_COMMON_ARGS + session.posargs),
        # Pytest will return 5 when no tests are collected. This can happen
        # on travis where slow and flaky tests are excluded.
        # See http://doc.pytest.org/en/latest/_modules/_pytest/main.html
        success_codes=[0, 5],
        env=get_pytest_env_vars()
    )


@nox.session(python=ALL_VERSIONS)
def py(session):
    u"""Runs py.test for a sample using the specified version of Python."""
    if session.python in TESTED_VERSIONS:
        _session_tests(session)
    else:
        session.skip(u"SKIPPED: {} tests are disabled for this sample.".format(
            session.python
        ))


#
# Readmegen
#


def _get_repo_root():
    u""" Returns the root folder of the project. """
    # Get root of this repository. Assume we don't have directories nested deeper than 10 items.
    p = Path(os.getcwdu())
    for i in xrange(10):
        if p is None:
            break
        if Path(p / u".git").exists():
            return unicode(p)
        # .git is not available in repos cloned via Cloud Build
        # setup.py is always in the library's root, so use that instead
        # https://github.com/googleapis/synthtool/issues/792
        if Path(p / u"setup.py").exists():
            return unicode(p)
        p = p.parent
    raise Exception(u"Unable to detect repository root.")


GENERATED_READMES = sorted([x for x in Path(u".").rglob(u"*.rst.in")])


@nox.session
@nox.parametrize(u"path", GENERATED_READMES)
def readmegen(session, path):
    u"""(Re-)generates the readme for a sample."""
    session.install(u"jinja2", u"pyyaml")
    dir_ = os.path.dirname(path)

    if os.path.exists(os.path.join(dir_, u"requirements.txt")):
        session.install(u"-r", os.path.join(dir_, u"requirements.txt"))

    in_file = os.path.join(dir_, u"README.rst.in")
    session.run(
        u"python", _get_repo_root() + u"/scripts/readme-gen/readme_gen.py", in_file
    )
